
# 1. Gold locker (Gold loan) Done
# 2. H4 Process and Room 
# 3. AWS Certification / Jenkins and terraform deployment
# 5. Guruji Application
# 6. Performance Appraisal
# 7. 


# HRA -> 38K*12 ==>4.56L
# LTA -> 9K*12 ==>1L
# 80C --> 1.5L 
# 24b --> 2L 
# standard --> 50K 
# Medical Expenses --> 25K
# 80G --> 1.5L


# Things do to
# 1. Delivery report WhatsApp
# 2. Udemy AI courses
# 3. AWS Security Specialist
# 4. 


# import boto3
# import random

# # Set up AWS credentials
# access_key_id = ''
# secret_access_key = 'K5646ilVq7J5voYf7zVXYNgvKrp8s+vxEI4A/PJ1'
# region = 'us-east-1'

# # Create an instance of the AWS SNS client
# sns = boto3.client('sns', aws_access_key_id=access_key_id, aws_secret_access_key=secret_access_key, region_name=region)

# # Function to send SMS OTP
# def send_otp(phone_number):
#     # Generate a random OTP
#     otp = str(random.randint(1000, 9999))

#     # Set the message content
#     message = f"Your OTP is: {otp}"

#     # Set the SMS message parameters
#     params = {
#         'Message': message,
#         'PhoneNumber': phone_number
#     }

#     # Publish the SMS message
#     response = sns.publish(**params)

#     # Return the generated OTP
#     return otp

# # Function to validate OTP
# def validate_otp(entered_otp, generated_otp):
#     return entered_otp == generated_otp

# Example usage
# phone_number = '+918688212123'
# generated_otp = send_otp(phone_number)
# print(generated_otp)


# from flask import Flask 
# AWS Account Doraemon
# 938674487254

# EAARDEWiFyZAsBAH8DD63AQBCmimpxiEBcWEtZA7ouCrbkGMZANUl2gNyKK0f8RNxyaJC6YBaZCnvKePBHQD4F2mnSBUFDP5F2b2brWzu7PuLCjyVFFmCskA7guWO6NFiX8mZCKPZCscO1UxPWTalZAiZB2K51FVvomQ9ml4ZBMQo7JIrdeb98DQG5VCcEgF7PJTgmjBkoW0MktYjaRyR8RWwSF6PaBGSGyUwZD

# http://45.114.143.23/api/mt/SendSMS?user=sksms&password=sphoorthioumsks&senderid=SSSGVS&channel=Trans&DCS=0&flashsms=0&number=8688212123&text=Sphoorthi%20Oum,%20Thank%20you%20for%20registering%20successfully.%20Event%20Name%20:%2012%20Event%20date%20:%2012-12,%2012%20Time%20:%2012:12-12:12%20Location%20:%2012%20Please%20subscribe%20to%20the%20below%20mentioned%20channel%20for%20further%20updates.%2012%20Team%20SSSGVS&route=07&peid=1201159826960545852&dlttemplateid=1207165822097849145

# INSERT INTO table_name (event_id, event_name, event_description,event_start_date, event_end_date,event_reg_start_date,
# event_reg_end_date,event_duration, event_nature, event_category,event_type, event_registration,_type,event_pitham,event_shortname)
# VALUES (11,'Prasthana Sadhana July 2023','With the Divine Blessings of The Scientific Saint His Holiness Sri Sri Sri Guru ViswaSphoorthi','2023-07-28 00:00:00','2023-07-30 00:00:00','2023-07-24 00:00:00','2023-07-30 00:00:00',
# '4:30 AM To 7:00 AM','online','Universal level','all',0,'upcoming','all','July Prasthana Sadhana')


# UPDATE spoorthiVPSdb.table_events
# SET _type = 'past',
# WHERE event_id = 10


# # initialize using environment variables
# from elasticapm.contrib.flask import ElasticAPM
# app = Flask(__name__)
# apm = ElasticAPM(app)

# # or configure to use ELASTIC_APM in your application's settings
# from elasticapm.contrib.flask import ElasticAPM
# app.config['ELASTIC_APM'] = {
# # Set the required service name. Allowed characters:
# # a-z, A-Z, 0-9, -, _, and space
# 'SERVICE_NAME': 'TestingByRakIgnorethis',

# # Use if APM Server requires a secret token
# 'SECRET_TOKEN': '49y4FFBXAH0GLnXupY',

# # Set the custom APM Server URL (default: http://localhost:8200)
# 'SERVER_URL': 'https://dc94958e8f8140e984a5e74ec0f7f1a5.apm.us-east-1.aws.cloud.es.io:443',

# # Set the service environment
# 'ENVIRONMENT': 'production',
# }
# app.debug = False
# apm = ElasticAPM(app)


# @app.route("/one")
# def hello_world():
#   try:
#       1/0
#   except:
#       print("excception happend")
#       apm.capture_exception()
#   return "Hey its excception"


# app.run(debug=False)




# 1. Crerate a service type of ClusterIP for internal communication

# 2. For cluster resize use gcloud command

# 3. BigQuery is not transactional database

# 4. Verify the assigned permissions in a custom IAM role in 
#   IAM Section view information

# 5. Stackdriver debugging helps you allow live debugging without stopping your application

# 6. Google cloud directory sync used sync data with Active directory

# 7. Fail over replicas offer Cloud SQL to help with high availability

# 8. SSD Persistent disk is still be available when an instance is stopped

# 9. Projects and networks are isolated groups of VM instances.

# 10. Debugger and Error reporting Serives will alert you about errors generated by your application

# 11. GCP and AWS we can use Stackdriver monitor

# 12. 




# import requests

# url = 'https://graph.facebook.com/v16.0/122973427461026/messages'
# headers = {
#     'Authorization': "EAAM3ZAojxoqkBAJF9r4MMp01mJoNXOlIb7V6S5SQStlxwrBMuUoA9SnEtzncp2CO62WaYGhikR5IXSZCrq0aBjkE3CZAwGITmAx9X4qG6kosbgxRA3a2mCavYwgrpIJCUOdOixUjeOz5nq7w2N8g4oZAgBUpNZB6jFoIZBlgZCnhiqz2UYnridkgzW3DEMu9pVBxJa06pMQjwZDZD"
#    'Content-Type': 'application/json'
# }
# data = {
#     'messaging_product': 'whatsapp',
#     'to': '918688212123',
#     'text':{"body" : "hi I'"}
# }

# response = requests.post(url, headers=headers, json=data)
# print(response.text)



# import requests

# def send_sms():
#     text = f"""
#         Sphoorthi Oum, Thank you for registering successfully.
#     Event Name : "VenkyTestEvent"
#     Event date : "00/00/0000"
#     Time : "00:00"
#     Location : "TestLocation"
#     Please subscribe to the below mentioned channel for further updates. 
#     https://bit.ly/3Oz2H84 
#     Team
#     SSSGVS
#         """
#     url = f"""http://45.114.143.23/api/mt/SendSMS?user=sksms&password=sphoorthioumsks&senderid=SSSGVS&channel=Trans&DCS=0&flashsms=0&number=8688212123&text={text}&route=07&peid=1201159826960545852&dlttemplateid=1207165822097849145"""

#     url = """http://45.114.143.23/api/mt/SendSMS?user=sksms&password=sphoorthioumsks&senderid=SSSGVS&channel=Trans&DCS=0&flashsms=0&number=7989868650&text=Sphoorthi Oum, Thank you for registering successfully. Event Name : test Event date : January 29-04, 2023 Time : 4:30AM-07.00AM Location : online Please subscribe to the below mentioned channel for further updates. https://test.com Team SSSGVS&route=07&peid=1201159826960545852&dlttemplateid=1207165822097849145"""
#     print(url)
#     response = requests.post(url)
#     print("request sent")
#     print(response.status_code)
#     if response.status_code == 200:
#         # SMS sent successfully
#         return ("SMS sent")
#     else:
#         # SMS sending failed
#         return ("SMS sending failed")


# send_sms()



    

import json

def msgData(to, template, data):
    print(template)
    config = {
        # 'ps_inviation' : [
        #     {
        #         "type": "text",
        #         "text": data[0]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[1]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[2]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[3]
        #     },{
        #         "type": "text",
        #         "text": data[4]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[5]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[6]
        #     }
        # ],
        # 'prasthan_sadhana_invitation':[
        #     {
        #         "type": "text",
        #         "text": data[0]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[1]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[2]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[3]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[4]
        #     },
        # ],
        # 'prasthana_sadhana_daily_info_twinglish':[
        #     {
        #         "type": "text",
        #         "text": data[0]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[1]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[2]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[3]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[4]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[5]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[6]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[7]
        #     },
        # ],
        # 'prasthana_sadhana_daily_info':[
        #     {
        #         "type": "text",
        #         "text": data[0]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[1]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[2]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[3]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[4]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[5]
        #     },
        #     {
        #         "type": "text",
        #         "text": data[6]
        #     },
        # ],

        # 'prasthan_sadhana_feedback':[
        #     {
        #         "type": "text",
        #         "text": data[0]
        #     }
        # ],
        'feedback_prasthana_sadhana':[
            {
                "type": "text",
                "text": data[0]
            },
            {
                "type": "text",
                "text": data[1]
            },
            {
                "type": "text",
                "text": data[2]
            },
            {
                "type": "text",
                "text": data[3]
            }
            ],
        # 'sathsangam_video':[
        #     {
        #         "type": "text",
        #         "text": data[0]
        #     }]

    }
    
    if template == "ps_inviation":
        return json.dumps({
        "messaging_product": "whatsapp",
        "preview_url": False,
        "recipient_type": "individual",
        "to": "91"+to,
        "type": "template",
        "template": {
            "name": template,
            "language": {
                "code": "en_US"
            },
            "components": [
            {
                "type": "body",
                "parameters": config[template]
            }
            ]
        }
    })

    if template == "prasthana_sadhana_daily_info":
        return json.dumps({
        "messaging_product": "whatsapp",
        "preview_url": False,
        "recipient_type": "individual",
        "to": "91"+to,
        "type": "template",
        "template": {
            "name": template,
            "language": {
                "code": "en_US"
            },
            "components": [
            {
                "type": "body",
                "parameters": config[template]
            }
            ]
        }
    })

    if template == "feedback_prasthana_sadhana":
        return json.dumps({
        "messaging_product": "whatsapp",
        "preview_url": False,
        "recipient_type": "individual",
        "to": "91"+to,
        "type": "template",
        "template": {
            "name": template,
            "language": {
                "code": "en_US"
            },
            "components": [
            {
                "type": "body",
                "parameters": config[template]
            }
            ]
        }
    })
    if template == "events_feedback":
        return json.dumps({
        "messaging_product": "whatsapp",
        "preview_url": False,
        "recipient_type": "individual",
        "to": to,
        "type": "template",
        "template": {
            "name": template,
            "language": {
                "code": "en_US"
            },
            "components": [
            {
                "type": "body",
                "parameters": config[template]
            }
            ]
        }
    })
        
    if template == 'sathsangam_video':
        print("sathsangam_video template returned")
        return json.dumps({
        "messaging_product": "whatsapp",
        "preview_url": False,
        "recipient_type": "individual",
        "to": "91"+to,
        "type": "template",
        "template": {
            "name": template,
            "language": {
                "code": "en_US"
            },
            "components": [
                    {
                "type": "header",
                "parameters": [
                  {
                    "type": "video",
                    "video": {
                      "link": "https://sphoorthi-video.s3.amazonaws.com/manikonda_sathsangam.mp4"
                    }
                  }
                ]
              },
            {
                "type": "body",
                "parameters": config[template]
            }
            ]
        }
    })

    return json.dumps({
        "messaging_product": "whatsapp",
        "preview_url": False,
        "recipient_type": "individual",
        "to": "91"+to,
        "type": "template",
        "template": {
            "name": template,
            "language": {
                "code": "en_US"
            },
            "components": [
                    {
                "type": "header",
                "parameters": [
                  {
                    "type": "video",
                    "video": {
                      "link": "https://sphoorthi-video.s3.amazonaws.com/manikonda_sathsangam.mp4"
                    }
                  }
                ]
              },
            {
                "type": "body",
                "parameters": config[template]
            }
            ]
        }
    })

import requests
def send_whatsapp_message(to, template, data):
    url = f'https://graph.facebook.com/v17.0/110974595107295/messages'
    headers = {
        'Authorization': f'Bearer EAARDEWiFyZAsBO52JIYPK8e6LNdCrkTANYccXFmlGl43fMme94SZAyiNsYAEw3g7t63tnZA65czpxC8vlx6lowlbvuPLZADQz0RFAnvh92yw10x3Wzm3ZBmDSks6VXO0LPEt4T0l9mc5qlixNif90ZAgx3vZAqvVBqE3xLZAIy51oZCeMwyleqCaGSse7VbuY80GuZAVZAUcyC91YqYoZAtqKZAb6h0egAdkZD',
        'Content-Type': 'application/json'
    }
    payload = msgData(to, template, data)

    response = requests.post(url, headers=headers, data=payload)
    print(response.text)

    if response.status_code == 200:
        print("WhatsApp message sent successfully.")
        return {'message': 'WhatsApp message sent successfully.'}
    else:
        print("----------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>FAILED TO SEND WHATSAPP MESSAGE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-------------")
        return {'message': 'Failed to send WhatsApp message.'}




##### This code is for reading from the phone numbers ###########

# recepient_list = ['7021558129', '9966336454', '9372307919', '9390387524', '8978528856', '9652111779', '7075679912', '9949881808', '8985859335', '9000004438', '9676405884', '9494227461', '9704011676', '9030212259', '8008022775', '9966669507', '8142914969', '9959794910', '9949158975', '9502802567', '9393353189', '9493792053', '9959808594', '9561065991', '8074509530', '9885145298', '9440698644', '9347009101', '9291370940', '6303759709', '9885093777', '9030035010', '9440867288', '9885175030', '9849464057', '9052628772', '9573762587', '9347248776', '9182261282', '9441508996', '9182489717', '8886789176', '8008672324', '6302057160', '8096599399', '9701075030', '6305275493', '8186951182', '9550401017', '7337057279', '9885448500', '9823625244', '9398963624', '7207520352', '9100935326', '6301661415', '9885531745', '8099481390', '9908240262', '9849197575', '9491061771', '8978686987', '9666949292', '9949774174', '9440070822', '9949395006', '8686174741', '8421777737', '7842436699', '9030229846', '9398293137', '9866499691', '7337360939', '9948096658', '8527590036', '9010495820', '7093471923', '7396737542', '9866338883', '9849720923', '9490469923', '9292804723', '9885252592', '9912497722', '7893248327', '9490993987', '8688212123', '9963283152', '9393005982', '9491357052', '9666400224', '9440790134', '9392101220', '9676760864', '9885866979', '9948907806', '9573515066', '8309451251', '7993956759', '9642112379', '9505809999', '7799110020', '9848016944', '9912876533', '9912876285', '9730265554', '9848363948', '8978684400', '8130698291', '9014358395', '9848770571', '7036351245', '6309148964', '7306422188', '9849698972', '9866845047', '9133745737', '7026834804', '6305894379', '6305952655', '9100023180', '8886999643', '9701405803', '9160307916', '9848299373', '9490810438', '9701891539', '9398924714', '9949433521', '9618877544', '9110330175', '9922381891', '9491356841', '9930989133', '9848769335', '8978711781', '9908621090', '9440920133', '9381334338', '9502822877', '9948608722', '9392981847', '7989058590', '9989047842', '7680807338', '9966649735', '8926199380', '9505024023', '9963396241', '7981580905', '9666130338', '9100509846', '9652435799', '9440868978', '9701218582', '8688419833', '9573706134', '7386893178', '9652174785', '9391958609', '9949995873', '6300652024','9110587609','8985101025','9908247751','7893002782','8600145718']
# recepient_dict = {'6281053602': 'Spandana', '7396700379': 'Goldy', '7659001942': 'Sangamma', '7799472810': 'Neeraj', '8106164187': 'Varshitha', '8688166735': 'Pranaya', '9177542759': 'Madhu Priya', '9346533542': 'Durga', '9441209264': 'Premaja Lakshmi', '9502909316': 'Likitha', '9542154450': 'Bheemudu', '9550033115': 'Sindhu, Ayan', '9603551382': 'Ganesh, Bhagvandas', '9640389706': 'Saritha', '9652105828': 'Salaya Begum', '9700233712': 'Srinivas', '9703682544': 'Afreen', '9705048169': 'Hasini', '9885779994': 'Vijaya, Mounika', '9912106284': 'Anvika, Manjula', '9912658661': 'Arun'}

# # 9642439699
# c = 0
# for number,name in recepient_dict.items():
#     print(f"sending to {c} of {len(recepient_dict)}")
#     print(number,name)
#     send_whatsapp_message(number,"events_followup_info",[name, "Thank you for attending Sphoorthi Satsangam at *Kothur*","To get the updates of Sphoorthi Kutumbam Trust & watch Sri Guruji's Divine speeches, please subscribe"])
#     c +=1






######## This code is for reading from file #########

c = 0
import time
import pandas as pd 

df = pd.read_excel('VijayaDashami2023_PrasthanaSadhana_RegisteredParticipants.xlsx',sheet_name='232 WhatsApp')
c = 0
for index, row in df.iterrows():
    number = str(row['participant_phone']).strip()  # Replace 'Column1' with the actual column name
    name = row['participant_name']  # Replace 'Column2' with the actual column name
    print("phone:  ",number)
    print("name:   ",name)
    
    c+=1
    if c == 1:
        continue
    print(f"currently sending message::{c}  ---> {number}")
    send_whatsapp_message(number,"feedback_prasthana_sadhana",[name,"Thank you for participating in the *Prasthana Sadhana - the process and the practice of the ascension* 5 day practice program", "We request your valuable feedback through the link below","https://forms.gle/QCPBMhV5xyxHyH5v8"])
    
    

    # send_whatsapp_message(number,"ps_inviation",["Vijaya Dasami - Prasthana Sadhana", "Venue: Online",
    #                                                 "Date: 19th October 2023","Time: 4:30 AM to 6:00 AM",
    #                                                 "https://sphoorthikutumbam-telangana.org/user/EventsRegistration/13/Vijaya%20Dasami%20Prasthana%20Sadhana",
    #                                                 "7993956759, 9666755138","Note : People who perform Prasthana Sadhana from their homes and are not related to any Guru Peetam should select the option 'Host location - Home' in the drop-down list."])
    # break
    # else:
    #     print("whatsapp number is not correct==============>",number)
#     # send_whatsapp_message(number,"sathsangam_feedback",["Habsiguda","https://forms.gle/78a4kod1VrLgVA4W9"])
#     # send_whatsapp_message(number,"prasthan_sadhana_feedback",["https://shorturl.at/awXY8"])
#     # send_whatsapp_message(number,"prasthan_sadhana_invitation",["June",".","June 23rd - 25th", "https://sphoorthikutumbam-telangana.org/user/EventsRegistration/10/Prasthana%20Sadhana","https://www.youtube.com/@srisrisriguruviswasphoorthi"])
#     send_whatsapp_message("8688212123","prasthana_sadhana_daily_info",["Vijaya Dasami" "Prasthana Sadhana - 2023","Online", "19-10-2023","1","https://youtube.com/live/SxitbmHE18E?feature=share","http://shorturl.at/oCDS9"])



# send_whatsapp_message("9642439699","prasthan_sadhana_feedback",["https://shorturl.at/lMOZ9"])


# import requests

# url = 'https://graph.facebook.com/v17.0/110974595107295/messages'
# headers = {
#     'Authorization': 'Bearer EAARDEWiFyZAsBAH8DD63AQBCmimpxiEBcWEtZA7ouCrbkGMZANUl2gNyKK0f8RNxyaJC6YBaZCnvKePBHQD4F2mnSBUFDP5F2b2brWzu7PuLCjyVFFmCskA7guWO6NFiX8mZCKPZCscO1UxPWTalZAiZB2K51FVvomQ9ml4ZBMQo7JIrdeb98DQG5VCcEgF7PJTgmjBkoW0MktYjaRyR8RWwSF6PaBGSGyUwZD',
#     'Content-Type': 'application/json'
# }
# data = {
#     "messaging_product": "whatsapp",
#     "recipient_type": "individual",
#     "to": "919010495820",
#     "type": "text",
#     "text": {
#         "preview_url": False,
#         "body": "Sphoorthi Oum!! Test message from Venky!! Ha ha ha "
#     }
# }

# response = requests.post(url, headers=headers, json=data)
# print(response.text)



# import boto3
# import random

# # Set up AWS credentials
# access_key_id = 'AKIA5VDK377LIBMRHOFI'
# secret_access_key = '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'
# region = 'us-east-1'

# # Create an instance of the AWS SNS client
# sns = boto3.client('sns', aws_access_key_id=access_key_id, aws_secret_access_key=secret_access_key, region_name=region)

# # Function to send SMS OTP
# def send_otp(phone_number):
#     # Generate a random OTP
#     otp = str(random.randint(1000, 9999))

#     # Set the message content
#     message = f"Your OTP is: {otp}"

#     # Set the SMS message parameters
#     params = {
#         'Message': message,
#         'PhoneNumber': phone_number
#     }

#     # Publish the SMS message
#     response = sns.publish(**params)

#     # Return the generated OTP
#     return otp

# # # Function to validate OTP
# # def validate_otp(entered_otp, generated_otp):
# #     return entered_otp == generated_otp

# # Example usage
# phone_number = '+918688212123'
# generated_otp = send_otp(phone_number)
# print(generated_otp)


# if validate_otp(entered_otp, generated_otp):
#     print('OTP is valid')
#     # Proceed with desired actions
# else:
#     print('Invalid OTP')
#     # Show error message





# 1. Migration (Accounts/Domain/billing)
# 2. Database Schema/ fields/ optional
# 3. Communication (SMS/Email/WhatsApp)
# 4. feature:
#     1. Registration form optimization (Prasthana Sadhana)
#     2. UI for communication WhatsApp
#     3. 


# Official Business WhatsApp page

# Google Analytics Tracking




Controlled Connectivity:
-----------------------
powrflow pd module lo kotha resource add chesi, pf instances eip query chesi, de instance SG lo add cheyali


de01 and de02 eip query chesi, pf security group lo add chesanu
pf1,pf2,pf3 eips query chesi, de security group lo dd cheyali


heart beat task
---------------
terraform-powerflow-post-deployment repo

assets/shell --> postdepolyment.sh lo add cheyali ee three commands:

docker info ## Note starting state (5s)

docker swarm update --dispatcher-heartbeat 10s

docker info ## Verify modified stated (10s)






